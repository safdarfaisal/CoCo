#ifndef DEFINITIONS_H
#define DEFINITIONS_H

#define MIN(x,y) x < y ? x : y
#define MAX(x,y) x > y ? x : y
#define BUFFERSIZE 2000
#define EOB '$'
#define KILL perror("TwinBuffer not initialized"); exit(EXIT_FAILURE);
#define NONTERMINALS  
#define TERMINALS 57
#define IDLENGTH 30

// typedef enum Terminals {
//     TK_ASSIGNOP,
//     TK_COMMENT,
//     TK_FIELDID,
//     TK_ID,
//     TK_NUM,
//     TK_RNUM,
//     TK_FUNID,
//     TK_RUID,
//     TK_WITH,
//     TK_PARAMETERS,
//     TK_END,
//     TK_WHILE,
//     TK_UNION,
//     TK_ENDUNION,
//     TK_DEFINETYPE,
//     TK_AS,
//     TK_TYPE,
//     TK_MAIN,
//     TK_GLOBAL,
//     TK_PARAMETER,
//     TK_LIST,
//     TK_SQL,
//     TK_SQR,
//     TK_INPUT,
//     TK_OUTPUT,
//     TK_INT,
//     TK_REAL,
//     TK_COMMA,
//     TK_SEM,
//     TK_COLON,
//     TK_DOT,
//     TK_ENDWHILE,
//     TK_OP,
//     TK_CL,
//     TK_IF,
//     TK_THEN,
//     TK_ENDIF,
//     TK_READ,
//     TK_WRITE,
//     TK_RETURN,
//     TK_PLUS,
//     TK_MINUS,
//     TK_MUL,
//     TK_DIV,
//     TK_CALL,
//     TK_RECORD,
//     TK_ENDRECORD,
//     TK_ELSE,
//     TK_AND,
//     TK_OR,
//     TK_NOT,
//     TK_LT,
//     TK_LE,
//     TK_GT,
//     TK_GE,
//     TK_EQ,
//     TK_NE,
//     EPSILON,
//     ERROR,
// } Terminals;

// typedef enum NonTerminals {
//     program,
//     mainFunction,
//     otherFunctions,
//     function,
//     input_par,
//     output_par,
//     parameter_list,
//     dataType,
//     primitiveDatatype,
//     constructedDatatype,
//     remaining_list,
//     stmts,
//     typeDefinitions,
//     isRedefined,
//     typeDefinition,
//     fieldDefinitions,
//     fieldDefinition,
//     moreFields,
//     declarations,
//     declaration,
//     global_or_not,
//     otherstmts,
//     stmt,
//     assignmentStmt,
//     singleOrRecId,
//     singleLeft,
//     oneExpansion,
//     moreExpanstions,
//     funCallStmt,
//     outputParameters,
//     inputParameters,
//     iterativeStmt,
//     conditionalStmt,
//     elseStmt,
//     ioStmt,
//     arithmeticExpression,
//     expPrime,
//     term,
//     termPrime,
//     factor,
//     highPrecedenceOps,
//     lowPrecedenceOps,
//     booleanExpression,
//     singleOrRecId,
//     var,
//     logicalOp,
//     relationalOp,
//     returnStmt,
//     optionalReturn,
//     idList,
//     moreIds,
//     definetypestmt,
//     a
// } NonTerminals;

typedef enum Symbols {
    program,
    mainFunction,
    otherFunctions,
    function,
    input_par,
    output_par,
    parameter_list,
    dataType,
    primitiveDatatype,
    constructedDatatype,
    remaining_list,
    stmts,
    typeDefinitions,
    isRedefined,
    typeDefinition,
    fieldDefinitions,
    fieldDefinition,
    moreFields,
    declarations,
    declaration,
    global_or_not,
    otherstmts,
    stmt,
    assignmentStmt,
    singleLeft,
    oneExpansion,
    moreExpanstions,
    funCallStmt,
    outputParameters,
    inputParameters,
    iterativeStmt,
    conditionalStmt,
    elseStmt,
    ioStmt,
    arithmeticExpression,
    expPrime,
    term,
    termPrime,
    factor,
    highPrecedenceOps,
    lowPrecedenceOps,
    booleanExpression,
    singleOrRecId,
    var,
    logicalOp,
    relationalOp,
    returnStmt,
    optionalReturn,
    idList,
    moreIds,
    definetypestmt,
    a,
    TK_ASSIGNOP,
    TK_COMMENT,
    TK_FIELDID,
    TK_ID,
    TK_NUM,
    TK_RNUM,
    TK_FUNID,
    TK_RUID,
    TK_WITH,
    TK_PARAMETERS,
    TK_END,
    TK_WHILE,
    TK_UNION,
    TK_ENDUNION,
    TK_DEFINETYPE,
    TK_AS,
    TK_TYPE,
    TK_MAIN,
    TK_GLOBAL,
    TK_PARAMETER,
    TK_LIST,
    TK_SQL,
    TK_SQR,
    TK_INPUT,
    TK_OUTPUT,
    TK_INT,
    TK_REAL,
    TK_COMMA,
    TK_SEM,
    TK_COLON,
    TK_DOT,
    TK_ENDWHILE,
    TK_OP,
    TK_CL,
    TK_IF,
    TK_THEN,
    TK_ENDIF,
    TK_READ,
    TK_WRITE,
    TK_RETURN,
    TK_PLUS,
    TK_MINUS,
    TK_MUL,
    TK_DIV,
    TK_CALL,
    TK_RECORD,
    TK_ENDRECORD,
    TK_ELSE,
    TK_AND,
    TK_OR,
    TK_NOT,
    TK_LT,
    TK_LE,
    TK_GT,
    TK_GE,
    TK_EQ,
    TK_NE,
    EPSILON
} Symbols;


typedef struct KeywordPair{
    char keyword[IDLENGTH];
    Symbols enumVal;

} KeywordPair; 


const KeywordPair keywords[27] = {
    {"with", TK_WITH},
    {"while", TK_WHILE},
    {"parameters", TK_PARAMETERS},
    {"end", TK_END},
    {"union", TK_UNION},
    {"endunion", TK_ENDUNION},
    {"definetype", TK_DEFINETYPE},
    {"as", TK_AS},
    {"type", TK_TYPE},
    {"global", TK_GLOBAL},
    {"parameter", TK_PARAMETER},
    {"list", TK_LIST},
    {"input", TK_INPUT},
    {"output", TK_OUTPUT},
    {"int", TK_INT},
    {"real", TK_REAL},
    {"endwhile", TK_ENDWHILE},
    {"if", TK_IF},
    {"then", TK_THEN},
    {"endif", TK_ENDIF},
    {"read", TK_READ},
    {"write", TK_WRITE},
    {"return", TK_RETURN},
    {"call", TK_CALL},
    {"record", TK_RECORD},
    {"endrecord", TK_ENDRECORD},
    {"else", TK_ELSE}
};

typedef struct SymbolPair
{
    char string[30];
    Symbols symbol;
} SymbolPair;


const SymbolPair StringToSymbols[111] = {
    {"program", program},
    {"mainFunction", mainFunction},
    {"otherFunctions", otherFunctions},
    {"function", function},
    {"input_par", input_par},
    {"output_par", output_par},
    {"parameter_list", parameter_list},
    {"dataType", dataType},
    {"primitiveDatatype", primitiveDatatype},
    {"constructedDatatype", constructedDatatype},
    {"remaining_list", remaining_list},
    {"stmts", stmts},
    {"typeDefinitions", typeDefinitions},
    {"isRedefined", isRedefined},
    {"typeDefinition", typeDefinition},
    {"fieldDefinitions", fieldDefinitions},
    {"fieldDefinition", fieldDefinition},
    {"moreFields", moreFields},
    {"declarations", declarations},
    {"declaration", declaration},
    {"global_or_not", global_or_not},
    {"otherstmts", otherstmts},
    {"stmt", stmt},
    {"assignmentStmt", assignmentStmt},
    {"singleOrRecId", singleOrRecId},
    {"singleLeft", singleLeft},
    {"oneExpansion", oneExpansion},
    {"moreExpanstions", moreExpanstions},
    {"funCallStmt", funCallStmt},
    {"outputParameters", outputParameters},
    {"inputParameters", inputParameters},
    {"iterativeStmt", iterativeStmt},
    {"conditionalStmt", conditionalStmt},
    {"elseStmt", elseStmt},
    {"ioStmt", ioStmt},
    {"arithmeticExpression", arithmeticExpression},
    {"expPrime", expPrime},
    {"term", term},
    {"termPrime", termPrime},
    {"factor", factor},
    {"highPrecedenceOps", highPrecedenceOps},
    {"lowPrecedenceOps", lowPrecedenceOps},
    {"booleanExpression", booleanExpression},
    {"singleOrRecId", singleOrRecId},
    {"var", var},
    {"logicalOp", logicalOp},
    {"relationalOp", relationalOp},
    {"returnStmt", returnStmt},
    {"optionalReturn", optionalReturn},
    {"idList", idList},
    {"moreIds", moreIds},
    {"definetypestmt", definetypestmt},
    {"a", a},
    {"TK_ASSIGNOP", TK_ASSIGNOP},
    {"TK_COMMENT", TK_COMMENT},
    {"TK_FIELDID", TK_FIELDID},
    {"TK_ID", TK_ID},
    {"TK_NUM", TK_NUM},
    {"TK_RNUM", TK_RNUM},
    {"TK_FUNID", TK_FUNID},
    {"TK_RUID", TK_RUID},
    {"TK_WITH", TK_WITH},
    {"TK_PARAMETERS", TK_PARAMETERS},
    {"TK_END", TK_END},
    {"TK_WHILE", TK_WHILE},
    {"TK_UNION", TK_UNION},
    {"TK_ENDUNION", TK_ENDUNION},
    {"TK_DEFINETYPE", TK_DEFINETYPE},
    {"TK_AS", TK_AS},
    {"TK_TYPE", TK_TYPE},
    {"TK_MAIN", TK_MAIN},
    {"TK_GLOBAL", TK_GLOBAL},
    {"TK_PARAMETER", TK_PARAMETER},
    {"TK_LIST", TK_LIST},
    {"TK_SQL", TK_SQL},
    {"TK_SQR", TK_SQR},
    {"TK_INPUT", TK_INPUT},
    {"TK_OUTPUT", TK_OUTPUT},
    {"TK_INT", TK_INT},
    {"TK_REAL", TK_REAL},
    {"TK_COMMA", TK_COMMA},
    {"TK_SEM", TK_SEM},
    {"TK_COLON", TK_COLON},
    {"TK_DOT", TK_DOT},
    {"TK_ENDWHILE", TK_ENDWHILE},
    {"TK_OP", TK_OP},
    {"TK_CL", TK_CL},
    {"TK_IF", TK_IF},
    {"TK_THEN", TK_THEN},
    {"TK_ENDIF", TK_ENDIF},
    {"TK_READ", TK_READ},
    {"TK_WRITE", TK_WRITE},
    {"TK_RETURN", TK_RETURN},
    {"TK_PLUS", TK_PLUS},
    {"TK_MINUS", TK_MINUS},
    {"TK_MUL", TK_MUL},
    {"TK_DIV", TK_DIV},
    {"TK_CALL", TK_CALL},
    {"TK_RECORD", TK_RECORD},
    {"TK_ENDRECORD", TK_ENDRECORD},
    {"TK_ELSE", TK_ELSE},
    {"TK_AND", TK_AND},
    {"TK_OR", TK_OR},
    {"TK_NOT", TK_NOT},
    {"TK_LT", TK_LT},
    {"TK_LE", TK_LE},
    {"TK_GT", TK_GT},
    {"TK_GE", TK_GE},
    {"TK_EQ", TK_EQ},
    {"TK_NE", TK_NE},
    {"EPSILON", EPSILON},
};

typedef enum boolean {
    FALSE = 0,
    TRUE = 1
} boolean;


#endif